name: Build and deploy .NET Core application to Web App hqdqhengdtz4w-website
on:
  push:
    branches:
    - master
  workflow_dispatch:
env:
  AZURE_WEBAPP_NAME: hqdqhengdtz4w-website
  AZURE_WEBAPP_PACKAGE_PATH: ./published
  CONFIGURATION: Release
  DOTNET_CORE_VERSION: 6.0.x
  WORKING_DIRECTORY: .
  RG: rg_AADAccessAzureSQLBlazorSvr
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}    
    - uses: actions/checkout@v2
    - name: deploy Plan and Web Site
      uses: azure/arm-deploy@v1
      with:
        subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
        resourceGroupName: ${{ env.RG }}
        template: ./deploy-AADAccessAzureSQLBlazorSvr.bicep
        failOnStdErr: false        
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ env.DOTNET_CORE_VERSION }}
    - name: Restore
      run: dotnet restore "${{ env.WORKING_DIRECTORY }}"
    - name: Build
      run: dotnet build "${{ env.WORKING_DIRECTORY }}" --configuration ${{ env.CONFIGURATION }} --no-restore
    - name: Test
      run: dotnet test "${{ env.WORKING_DIRECTORY }}" --no-build
    - name: Publish
      run: dotnet publish "${{ env.WORKING_DIRECTORY }}" --configuration ${{ env.CONFIGURATION }} --no-build --output "${{ env.AZURE_WEBAPP_PACKAGE_PATH }}"
    - name: deploy Azure SQL Server/Database
      uses: azure/arm-deploy@v1
      with:
        subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
        resourceGroupName: ${{ env.RG }}
        template: ./deploy-SqlSvr.bicep
        parameters: azureSqlServerAdminPassword=${{ secrets.AZURE_SQL_ADMIN_PASSWORD }}
        failOnStdErr: false        
    - name: Create Azure SQL ADMIN from AD user
      uses: azure/CLI@v1
      with:
        azcliversion: 2.30.0
        inlineScript: |
          name='AADAccessAzureSQLBlazorSvr'
          rg="rg_$name"
          loc='westus2'
          echo deploymenet complete
          echo create firewall to allow all azure services
          az sql server firewall-rule create -g $rg -s rbac-demo-server -n AllAzureServices --start-ip-address 0.0.0.0 --end-ip-address 0.0.0.0
          echo Create AD admin for signed in user
          az sql server ad-admin create --resource-group $rg --server-name rbac-demo-server --display-name ADMIN --object-id ${{ secrets.AZURE_AD_ADMIN_OBJECT_ID }}
          echo Assign Identity to web site
          az webapp identity assign --resource-group $rg --name hqdqhengdtz4w-website
          echo Fetch Website name
          website_username=$(az webapp list --query "[].{name: name}" -g $rg | jq ".[] | .name")
          echo "created website_username=$website_username"
    - name: Run SQL Scripts to populate database
      uses: azure/sql-action@v1.3
      with:
        connection-string: Server=tcp:rbac-demo-server.database.windows.net,1433;Initial Catalog=rbacdemoDatabase;Persist Security Info=False;User ID=serverAdmin;Password=${{ secrets.AZURE_SQL_ADMIN_PASSWORD }};MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;
        sql-file: '${{ env.WORKING_DIRECTORY }}/sqlscripts/*.sql'
    - name: use sqlcmd to create passwordless AAD access
      run: |
        echo "create website_username=$website_username"
        sqlcmd -S rbac-demo-server.database.windows.net -d rbacdemoDatabase -U ${{ secrets.AZURE_AD_ADMIN_ACCOUNT }} -P ${{ secrets.AZURE_AD_ADMIN_PASSWORD }} -G -l 30 -Q "CREATE USER [hqdqhengdtz4w-website] FROM EXTERNAL PROVIDER;"
        echo "add db_datareader"
        sqlcmd -S rbac-demo-server.database.windows.net -d rbacdemoDatabase -U ${{ secrets.AZURE_AD_ADMIN_ACCOUNT }} -P ${{ secrets.AZURE_AD_ADMIN_PASSWORD }} -G -l 30 -Q "ALTER ROLE db_datareader ADD MEMBER [hqdqhengdtz4w-website];"
        echo "add db_datawriter"
        sqlcmd -S rbac-demo-server.database.windows.net -d rbacdemoDatabase -U ${{ secrets.AZURE_AD_ADMIN_ACCOUNT }} -P ${{ secrets.AZURE_AD_ADMIN_PASSWORD }} -G -l 30 -Q "ALTER ROLE db_datawriter ADD MEMBER [hqdqhengdtz4w-website];"
        echo "add db_ddladmin"
        sqlcmd -S rbac-demo-server.database.windows.net -d rbacdemoDatabase -U ${{ secrets.AZURE_AD_ADMIN_ACCOUNT }} -P ${{ secrets.AZURE_AD_ADMIN_PASSWORD }} -G -l 30 -Q "ALTER ROLE db_ddladmin  ADD MEMBER [hqdqhengdtz4w-website];"

            
